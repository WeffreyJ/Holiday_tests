/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

// Generated for Arduino AVR/Uno/Mega by TcMenu 4.4.0 on 2025-01-04T19:10:22.030721900Z.

#include <tcMenu.h>
#include "T_Icodes_menu.h"
#include "ThemeMonoInverseBuilder.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "New Device", "202ea0dd-6a17-4ece-bf83-d01576534bd2" };

U8G2_SSD1306_128X64_NONAME_F_SW_I2C gfx(U8G2_R0, U8X8_PIN_NONE, U8X8_PIN_NONE, U8X8_PIN_NONE);
U8g2Drawable gfxDrawable(&gfx);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);

// Global Menu Item declarations
const PROGMEM SubMenuInfo minfoPowerMode = { "Power Mode", 23, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackPowerMode(&minfoPowerMode, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuPowerMode(&minfoPowerMode, &menuBackPowerMode, nullptr, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoEncoderSensitivity = { "Encoder Sensitivity", 22, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackEncoderSensitivity(&minfoEncoderSensitivity, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuEncoderSensitivity(&minfoEncoderSensitivity, &menuBackEncoderSensitivity, &menuPowerMode, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoDisplaySettings = { "Display Settings", 21, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackDisplaySettings(&minfoDisplaySettings, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuDisplaySettings(&minfoDisplaySettings, &menuBackDisplaySettings, &menuEncoderSensitivity, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoGeneralSettings = { "General Settings", 20, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackGeneralSettings(&minfoGeneralSettings, &menuDisplaySettings, INFO_LOCATION_PGM);
SubMenuItem menuGeneralSettings(&minfoGeneralSettings, &menuBackGeneralSettings, nullptr, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoPreviousErrorLog = { "PreviousErrorLog", 19, 0xffff, 0, ErrorLog };
BackMenuItem menuBackPreviousErrorLog(&minfoPreviousErrorLog, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuPreviousErrorLog(&minfoPreviousErrorLog, &menuBackPreviousErrorLog, nullptr, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoCurrentError = { "Current Error", 18, 0xffff, 0, CurrentError };
BackMenuItem menuBackCurrentError(&minfoCurrentError, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuCurrentError(&minfoCurrentError, &menuBackCurrentError, &menuPreviousErrorLog, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoErrorLog = { "Error Log", 17, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackErrorLog(&minfoErrorLog, &menuCurrentError, INFO_LOCATION_PGM);
SubMenuItem menuErrorLog(&minfoErrorLog, &menuBackErrorLog, &menuGeneralSettings, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoParameterGraphing = { "Parameter Graphing", 16, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackParameterGraphing(&minfoParameterGraphing, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuParameterGraphing(&minfoParameterGraphing, &menuBackParameterGraphing, nullptr, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoTemperatureValues = { "TemperatureValues", 9, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackTemperatureValues(&minfoTemperatureValues, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuTemperatureValues(&minfoTemperatureValues, &menuBackTemperatureValues, &menuParameterGraphing, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoPressureValues = { "PressureValues", 8, 0xffff, 0, PressureValues };
BackMenuItem menuBackPressureValues(&minfoPressureValues, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuPressureValues(&minfoPressureValues, &menuBackPressureValues, &menuTemperatureValues, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoSensorValues = { "Sensor Values", 7, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSensorValues(&minfoSensorValues, &menuPressureValues, INFO_LOCATION_PGM);
SubMenuItem menuSensorValues(&minfoSensorValues, &menuBackSensorValues, &menuErrorLog, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoPressure = { "Pressure", 15, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackPressure(&minfoPressure, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuPressure(&minfoPressure, &menuBackPressure, nullptr, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoTemperature = { "Temperature", 14, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackTemperature(&minfoTemperature, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuTemperature(&minfoTemperature, &menuBackTemperature, &menuPressure, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoCustomCalibrate = { "Custom Calibrate", 12, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackCustomCalibrate(&minfoCustomCalibrate, &menuTemperature, INFO_LOCATION_PGM);
SubMenuItem menuCustomCalibrate(&minfoCustomCalibrate, &menuBackCustomCalibrate, nullptr, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoNewSubMenu = { "New SubMenu", 13, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackNewSubMenu(&minfoNewSubMenu, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuNewSubMenu(&minfoNewSubMenu, &menuBackNewSubMenu, nullptr, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoHardOperation = { "Hard Operation", 11, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackHardOperation(&minfoHardOperation, &menuNewSubMenu, INFO_LOCATION_PGM);
SubMenuItem menuHardOperation(&minfoHardOperation, &menuBackHardOperation, &menuCustomCalibrate, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoMediumOperation = { "Medium Operation", 10, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackMediumOperation(&minfoMediumOperation, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuMediumOperation(&minfoMediumOperation, &menuBackMediumOperation, &menuHardOperation, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoTemperatureRange = { "Temperature Range", 5, 0xffff, 0, Temperature };
BackMenuItem menuBackTemperatureRange(&minfoTemperatureRange, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuTemperatureRange(&minfoTemperatureRange, &menuBackTemperatureRange, nullptr, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoPressureRange = { "Pressure Range", 4, 0xffff, 0, PressureData };
BackMenuItem menuBackPressureRange(&minfoPressureRange, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuPressureRange(&minfoPressureRange, &menuBackPressureRange, &menuTemperatureRange, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoDocumentation = { "Documentation", 3, 0xffff, 0, Log_ReadMe };
BackMenuItem menuBackDocumentation(&minfoDocumentation, nullptr, INFO_LOCATION_PGM);
SubMenuItem menuDocumentation(&minfoDocumentation, &menuBackDocumentation, &menuPressureRange, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoSoftOperation = { "Soft operation", 2, 0xffff, 0, SoftModeFunction };
BackMenuItem menuBackSoftOperation(&minfoSoftOperation, &menuDocumentation, INFO_LOCATION_PGM);
SubMenuItem menuSoftOperation(&minfoSoftOperation, &menuBackSoftOperation, &menuMediumOperation, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoOperationMode = { "Operation Mode", 1, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackOperationMode(&minfoOperationMode, &menuSoftOperation, INFO_LOCATION_PGM);
SubMenuItem menuOperationMode(&minfoOperationMode, &menuBackOperationMode, &menuSensorValues, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(true);
    // Code generated by plugins and new operators.
    gfx.begin();
    renderer.setUpdatesPerSecond(10);
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, true);
    menuMgr.initForEncoder(&renderer, &menuOperationMode, 2, 3, 8);
    installMonoInverseTitleTheme(renderer, MenuFontDef(nullptr, 1), MenuFontDef(nullptr, 1), true, BaseGraphicalRenderer::TITLE_FIRST_ROW, false);
}

